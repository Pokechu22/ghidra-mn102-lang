# sleigh specification file for Matsushita MN102

@define H_VARIANT 1

#@define BIT_OPS "PCODEOPS"
#@define BIT_OPS "SHIFTS" 
@define BIT_OPS "BIT_ADDRS"

# It's sometimes clearer for decompilation to omit the pushing and
# restoring of the return value for function calls.
#@define OMIT_RETADDR

# TODO !!! need to fully employ resultflags macro after resolving the use of the above BIT_OPS !!!
# TODO !!! Need to fill-out SFR bits in 80251.pspec !!!

@if defined(ENDIAN)
define endian=$(ENDIAN);
@else
define endian=little;
@endif

define alignment=1;

@define PTRSIZE 3
@define SP_SIZE 3

define space ram     type=ram_space      size=3  default;

# MN102 spaces map to the following regions of the address space:
# http://hitmen.c02.at/files/yagcd/yagcd/chap5.html#sec5.7.4
#   cpu ram  - 0x008000-0x009000 (4kb)
#   main rom - 0x080000-0x0a0000 (128kb), mirrored
#   ext ram  - 0x400000-0x4XXXXX (controller ram)

define space register type=register_space size=1;

# P.19 or section 2
# Data registers
define register offset=0 size=3 [ D0 D1 D2 D3 ];
# Address registers
define register offset=12 size=3 [ A0 A1 A2 A3 ];
# Program counter
define register offset=24 size=3 [ PC ];
# Multiply/divide register
define register offset=27 size=2 [ MDR ];
# Processor status word
define register offset=29 size=2 [ PSW ];

# These seem to cause issues, not only in code but also with https://github.com/NationalSecurityAgency/ghidra/issues/1144
# define bitrange ZF=PSW[0,1]   # Zero flag
# 				NF=PSW[1,1]   # Negative flag
# 				CF=PSW[2,1]   # Carry flag - 16 bit!
# 				VF=PSW[3,1]   # Overflow flag - 16 bit!
# 				ZX=PSW[4,1]   # Extended zero flag
# 				NX=PSW[5,1]   # Extended negative flag
# 				CX=PSW[6,1]   # Extended carry flag
# 				VX=PSW[7,1]   # Extended overflow flag
# 				IM0=PSW[8,1]  # Interrupt mask 0
# 				IM1=PSW[9,1]  # Interrupt mask 1
# 				IM2=PSW[10,1] # Interrupt mask 2
# 				IE=PSW[11,1]  # Interrupt enable
# 				S0=PSW[12,1]  # Software bit 0
# 				S1=PSW[13,1]; # Software bit 1

# so instead use this hack found in the 8051_main file...
#@define ZF "PSW[0,1]"   # Zero flag
#@define NF "PSW[1,1]"   # Negative flag
#@define CF "PSW[2,1]"   # Carry flag - 16 bit!
#@define VF "PSW[3,1]"   # Overflow flag - 16 bit!
#@define ZX "PSW[4,1]"   # Extended zero flag
#@define NX "PSW[5,1]"   # Extended negative flag
#@define CX "PSW[6,1]"   # Extended carry flag
#@define VX "PSW[7,1]"   # Extended overflow flag
#@define IM0 "PSW[8,1]"  # Interrupt mask 0
#@define IM1 "PSW[9,1]"  # Interrupt mask 1
#@define IM2 "PSW[10,1]" # Interrupt mask 2
#@define IE "PSW[11,1]"  # Interrupt enable
#@define S0 "PSW[12,1]"  # Software bit 0
#@define S1 "PSW[13,1]"  # Software bit 1

# Hack further
define register offset=32 size=1 [ PSW_ZF PSW_NF PSW_CF PSW_VF PSW_ZX PSW_NX PSW_CX PSW_VX IM0 IM1 IM2 IE S0 S1 ];
@define ZF  "PSW_ZF"
@define NF  "PSW_NF"
@define CF  "PSW_CF"
@define VF  "PSW_VF"
@define ZX  "PSW_ZX"
@define NX  "PSW_NX"
@define CX  "PSW_CX"
@define VX  "PSW_VX"
@define IM0 "PSW_IM0"
@define IM1 "PSW_IM1"
@define IM2 "PSW_IM2"
@define IE  "PSW_IE"
@define S0  "PSW_S0"
@define S1  "PSW_S1"

#define register offset=32 size=2 [pswcopy];
#@define ZF "pswcopy[0,1]"   # Zero flag
#@define NF "pswcopy[1,1]"   # Negative flag
#@define CF "pswcopy[2,1]"   # Carry flag - 16 bit!
#@define VF "pswcopy[3,1]"   # Overflow flag - 16 bit!
#@define ZX "pswcopy[4,1]"   # Extended zero flag
#@define NX "pswcopy[5,1]"   # Extended negative flag
#@define CX "pswcopy[6,1]"   # Extended carry flag
#@define VX "pswcopy[7,1]"   # Extended overflow flag
#@define IM0 "pswcopy[8,1]"  # Interrupt mask 0
#@define IM1 "pswcopy[9,1]"  # Interrupt mask 1
#@define IM2 "pswcopy[10,1]" # Interrupt mask 2
#@define IE "pswcopy[11,1]"  # Interrupt enable
#@define S0 "pswcopy[12,1]"  # Software bit 0
#@define S1 "pswcopy[13,1]"  # Software bit 1

#TOKENS - page 6
# There are 7 formats; 1-3 uses 1 opcode byte w/ registers and some other data
# in later bytes while 4-7 use 2 opcode bytes with other data.

define token format1 (8)
   opcode1     = (4,7)
   fullopcode1 = (0,7)
   e1          = (2,3)
   a1          = (2,3)
   d1          = (2,3)
   e2          = (0,1)
   a2          = (0,1)
   d2          = (0,1);

define token format2 (16)
   opcode2     = (0,7)
   opcode2x    = (12,15)
   opcode2f    = (8,15)
   opcode20    = (14,15) # used with d0w
   e1w         = (10,11)
   a1w         = (10,11)
   d1w         = (10,11)
   e2w         = (8,9)
   a2w         = (8,9)
   d2w         = (8,9)
   d0w         = (12,13)
   # h variant only
   bitmode2    = (8,8)
   bit2        = (9,11);

# H variant only
define token format3 (24)
   opcode3     = (0,7)
   opcode32    = (8,15)
   opcode33    = (20,23)
   bitmode     = (16,16)
   bit         = (17,19);

# n.b. the manual uses d8/d16/d24, but that gets confusing with d1/d2
define token immtoken8(8)
    imm8 = (0,7) hex
    delta8 = (0,7) signed hex;
define token immtoken16(16)
    imm16 = (0,15) hex
    abs16 = (0,15) hex
    delta16 = (0,15) signed hex;
define token immtoken24(24)
    imm24 = (0,23) hex
    abs24 = (0,23) hex
    delta24 = (0,23) signed hex;

# Not exactly happy about this, since it's not needed for the deltas...
Imm8:  imm8  is imm8  { export *[const]:1 imm8;  }
Imm16: imm16 is imm16 { export *[const]:2 imm16; }
Imm24: imm24 is imm24 { export *[const]:3 imm24; }

# OK, these really shouldn't be needed; why does inlining them give "Could not resolve at least 1 variable size"?
Addr16_1: abs16 is abs16 { export *:1 abs16; }
Addr24_1: abs24 is abs24 { export *:1 abs24; }
Addr16_2: abs16 is abs16 { export *:2 abs16; }
Addr24_2: abs24 is abs24 { export *:2 abs24; }
Addr16_3: abs16 is abs16 { export *:3 abs16; }
Addr24_3: abs24 is abs24 { export *:3 abs24; }

attach variables [ a1 a2 a1w a2w ] [ A0 A1 A2 A3 ];
attach variables [ d1 d2 d1w d2w ] [ D0 D1 D2 D3 ];

define pcodeop broken_abs_read;
define pcodeop broken_abs_write;
define pcodeop broken_constant;

# In order of pages in the manual
:MOV d1w,a2w is opcode2=0xF2 & opcode2x=0x3 & d1w & a2w { a2w = d1w; }
:MOV a1w,d2w is opcode2=0xF2 & opcode2x=0xF & a1w & d2w { d2w = a1w; }
:MOV d1,d2 is opcode1=8 & d1 & d2 { d2 = d1; } # Note: d2 != d1, but that won't matter yet
:MOV a1w,a2w is opcode2=0xF2 & opcode2x=0x7 & a1w & a2w { a2w = a1w; }
:MOV "PSW",d2w is opcode2=0xF3 & opcode2x=0xF & e1w=0 & d2w { d2w = zext(PSW); }
:MOV d1w,"PSW" is opcode2=0xF3 & opcode2x=0xD & d1w & e2w=0 { PSW = d1w:2; }
:MOV "MDR",d2w is opcode2=0xF3 & opcode2x=0xE & e1w=0 & d2w { d2w = zext(MDR); }
:MOV d1w,"MDR" is opcode2=0xF3 & opcode2x=0xC & d1w & e2w=0 { MDR = d1w:2; }

# All of the following require even addresses (even the 3-byte ones)
:MOV (a1),d2 is opcode1=2 & a1 & d2 { d2 = sext(*:2 a1); }
:MOV (delta8,a1),d2 is opcode1=6 & a1 & d2; delta8 { d2 = sext(*:2 (a1 + delta8)); }
:MOV (delta16,a1w),d2w is opcode2=0xF7 & opcode2x=0xC & a1w & d2w; delta16 { d2w = sext(*:2 (a1w + delta16)); }
:MOV (delta24,a1w),d2w is opcode2=0xF4 & opcode2x=0x8 & a1w & d2w; delta24 { d2w = sext(*:2 (a1w + delta24)); }
:MOV (d0w,a1w),d2w is opcode2=0xF1 & opcode20=1 & d0w & a1w & d2w { d2w = sext(*:2 (a1w + d0w)); }
:MOV (Addr16_2),d2 is opcode1=0xC & e1=2 & d2; Addr16_2 { d2 = sext(Addr16_2); } # C8-CB
:MOV (Addr24_2),d2w is opcode2=0xF4 & opcode2x=0xC & e1w = 0 & d2w; Addr24_2 { d2w = sext(Addr24_2); }
:MOV (a1),a2 is opcode1=7 & a1 & a2; delta8=0 { a2 = *:3 a1; } # Special case of the following
:MOV (delta8,a1),a2 is opcode1=7 & a1 & a2; delta8 { a2 = *:3 (a1 + delta8); }
:MOV (delta16,a1w),a2w is opcode2=0xF7 & opcode2x=0xB & a1w & a2w; delta16 { a2w = *:3 (a1w + delta16); }
:MOV (delta24,a1w),a2w is opcode2=0xF4 & opcode2x=0xF & a1w & a2w; delta24 { a2w = *:3 (a1w + delta24); }
:MOV (Addr16_3),a2w is opcode2=0xF7 & opcode2x=0x3 & e1w=0 & a2w; Addr16_3 { a2w = Addr16_3; }
:MOV (Addr24_3),a2w is opcode2=0xF4 & opcode2x=0xD & e1w=0 & a2w; Addr24_3 { a2w = Addr24_3; }

:MOV d2,(a1) is opcode1=0 & a1 & d2 { *:2 a1 = d2:2; }
:MOV d2,(delta8,a1) is opcode1=4 & a1 & d2; delta8 { *:2 (a1 + delta8) = d2:2; }
:MOV d2w,(delta16,a1w) is opcode2=0xF7 & opcode2x=0x8 & a1w & d2w; delta16 { *:2 (a1w + delta16) = d2w:2; }
:MOV d2w,(delta24,a1w) is opcode2=0xF4 & opcode2x=0x0 & a1w & d2w; delta24 { *:2 (a1w + delta24) = d2w:2; }
:MOV d2w,(d0w,a1w) is opcode2=0xF1 & opcode20=3 & d0w & a1w & d2w { *:2 (a1w + d0w) = d2w:2; }
:MOV d2,(Addr16_2) is opcode1=0xC & e1=0 & d2; Addr16_2 { Addr16_2 = d2:2; }
:MOV d2w,(Addr24_2) is opcode2=0xF4 & opcode2x=0x4 & e1w=0 & d2w; Addr24_2 { Addr24_2 = d2w:2; }
:MOV a2,(a1) is opcode1=5 & a1 & a2; delta8=0 { *:3 a1 = a2; } # Special case of the following
:MOV a2,(delta8,a1) is opcode1=5 & a1 & a2; delta8 { *:3 (a1+delta8) = a2; }
:MOV a2w,(delta16,a1w) is opcode2=0xF7 & opcode2x=0xA & a1w & a2w; delta16 { *:3 (a1w+delta16) = a2w; }
:MOV a2w,(delta24,a1w) is opcode2=0xF4 & opcode2x=0x1 & a1w & a2w; delta24 { *:3 (a1w+delta24) = a2w; }
:MOV a2w,(Addr16_3) is opcode2=0xF7 & opcode2x=0x2 & e1w=0 & a2w; Addr16_3 { Addr16_3 = a2w; }
:MOV a2w,(Addr24_3) is opcode2=0xF4 & opcode2x=0x5 & e1w=0 & a2w; Addr24_3 { Addr24_3 = a2w; }

# For some reason, this doesn't work, but a similar thing (clr) is shown in the example
:MOV Imm8,"D0" is opcode1=8 & e1=0 & e2=0; Imm8 { D0 = sext(Imm8); }
:MOV Imm8,"D1" is opcode1=8 & e1=1 & e2=1; Imm8 { D1 = sext(Imm8); }
:MOV Imm8,"D2" is opcode1=8 & e1=2 & e2=2; Imm8 { D2 = sext(Imm8); }
:MOV Imm8,"D3" is opcode1=8 & e1=3 & e2=3; Imm8 { D3 = sext(Imm8); }
#:MOV Imm8,d2 is opcode1=8 & d2 & d1=d2; Imm8 { d2 = sext(Imm8); } # Replaces d2 = d1 when same registers
:MOV Imm16,d2 is opcode1=0xF & e1=2 & d2; Imm16 { d2 = sext(Imm16); } # F8-FB
:MOV Imm24,d2w is opcode2=0xF4 & opcode2x=0x7 & e1w=0 & d2w; Imm24 { d2w = Imm24; }
:MOV Imm16,a2 is opcode1=0xD & e1=3 & a2; Imm16 { a2 = zext(Imm16); } # DC-DF
:MOV Imm24,a2w is opcode2=0xF4 & opcode2x=0x7 & e1w=1 & a2w; Imm24 { a2w = Imm24; }

:MOVX (delta8,a1w),d2w is opcode2=0xF5 & opcode2x=0x7 & a1w & d2w; delta8 { d2w = *:3 (a1w + delta8); }
:MOVX (delta16,a1w),d2w is opcode2=0xF7 & opcode2x=0x7 & a1w & d2w; delta16 { d2w = *:3 (a1w + delta16); }
:MOVX (delta24,a1w),d2w is opcode2=0xF4 & opcode2x=0xB & a1w & d2w; delta24 { d2w = *:3 (a1w + delta24); }
:MOVX d2w,(delta8,a1w) is opcode2=0xF5 & opcode2x=0x5 & a1w & d2w; delta8 { *:3 (a1w + delta8) = d2w; }
:MOVX d2w,(delta16,a1w) is opcode2=0xF7 & opcode2x=0x6 & a1w & d2w; delta16 { *:3 (a1w + delta16) = d2w; }
:MOVX d2w,(delta24,a1w) is opcode2=0xF4 & opcode2x=0x3 & a1w & d2w; delta24 { *:3 (a1w + delta24) = d2w; }

# MOVB (a1w),d2w is fake and is actually MOVBU (a1w, d2w) followed by EXTXB d2w - 1 byte smaller
:MOVB (delta8,a1w),d2w is opcode2=0xF5 & opcode2x=0x2 & a1w & d2w; delta8 { d2w = sext(*:1 (a1w + delta8)); }
:MOVB (delta16,a1w),d2w is opcode2=0xF7 & opcode2x=0xD & a1w & d2w; delta16 { d2w = sext(*:1 (a1w + delta16)); }
:MOVB (delta24,a1w),d2w is opcode2=0xF4 & opcode2x=0xA & a1w & d2w; delta24 { d2w = sext(*:1 (a1w + delta24)); }
:MOVB (d0w,a1w),d2w is opcode2=0xF0 & opcode20=1 & d0w & a1w & d2w { d2w = sext(*:1 (a1w + d0w)); }
# MOVB (abs16),d2w is fake
:MOVB (Addr24_1),d2w is opcode2=0xF4 & opcode2x=0xC & e1w=1 & d2w; Addr24_1 { d2w = sext(Addr24_1); }

:MOVB d1,(a2) is opcode1=1 & d1 & a2 { *:1 a2 = d1:1; }
:MOVB d2w,(delta8,a1w) is opcode2=0xF5 & opcode2x=0x1 & a1w & d2w; delta8 { *:1 (a1w + delta8) = d2w:1; }
:MOVB d2w,(delta16,a1w) is opcode2=0xF7 & opcode2x=0x9 & a1w & d2w; delta16 { *:1 (a1w + delta16) = d2w:1; }
:MOVB d2w,(delta24,a1w) is opcode2=0xF4 & opcode2x=0x2 & a1w & d2w; delta24 { *:1 (a1w + delta24) = d2w:1; }
:MOVB d2w,(d0w,a1w) is opcode2=0xF0 & opcode20=3 & d0w & a1w & d2w { *:1 (a1w + d0w) = d2w:1; }
:MOVB d2,(Addr16_1) is opcode1=0xC & e1=1 & d2; Addr16_1 { Addr16_1 = d2:1; }
:MOVB d2w,(Addr24_1) is opcode2=0xF4 & opcode2x=0x4 & e1w=1 & d2w; Addr24_1 { Addr24_1 = d2w:1; }

:MOVBU (a1),d2 is opcode1=3 & a1 & d2 { d2 = zext(*:1 a1); }
:MOVBU (delta8,a1w),d2w is opcode2=0xF5 & opcode2x=0x3 & a1w & d2w; delta8 { d2w = zext(*:1 (a1w + delta8)); }
:MOVBU (delta16,a1w),d2w is opcode2=0xF7 & opcode2x=0x5 & a1w & d2w; delta16 { d2w = zext(*:1 (a1w + delta16)); }
:MOVBU (delta24,a1w),d2w is opcode2=0xF4 & opcode2x=0x9 & a1w & d2w; delta24 { d2w = zext(*:1 (a1w + delta24)); }
:MOVBU (d0w,a1w),d2w is opcode2=0xF0 & opcode20=2 & d0w & a1w & d2w { d2w = zext(*:1 (a1w + d0w)); }
:MOVBU (Addr16_1),d2 is opcode1=0xC & e1=3 & d2; Addr16_1 { d2 = zext(Addr16_1); } # CC-CF
:MOVBU (Addr24_1),d2w is opcode2=0xF4 & opcode2x=0xC & e1w=2 & d2w; Addr24_1 { d2w = zext(Addr24_1); }

# Does a 32-bit sign extension of a 16-bit value... which is a bit odd
:EXT d1w is opcode2=0xF3 & opcode2x=0xC & d1w & e2w=1 {
    # MDR = (d1w & 0x8000) ? 0xFFFF : 0 would also work, but I guess that's not understandable
    local temp:4 = sext(d1w:2);
    MDR = temp(2);
}
# More normal extension instructions
:EXTX d2 is opcode1=0xB & e1=0 & d2 { d2 = sext(d2:2); }
:EXTXU d2 is opcode1=0xB & e1=1 & d2 { d2 = zext(d2:2); }
:EXTXB d2 is opcode1=0xB & e1=2 & d2 { d2 = sext(d2:1); }
:EXTXBU d2 is opcode1=0xB & e1=3 & d2 { d2 = zext(d2:1); }

macro addflags(op1, op2) {   # Flags set by add instructions
    $(CX) = ( carry(op1:3, op2:3));
    $(VX) = (scarry(op1:3, op2:3));
    $(CF) = ( carry(op1:2, op2:2));
    $(VF) = (scarry(op1:2, op2:2));
}

macro resultflags(op) {
    $(NX) = (op:3 s< 0);
    $(ZX) = (op:3 == 0);
    $(NF) = (op:2 s< 0);
    $(ZF) = (op:2 == 0);
}

:ADD d1,d2 is opcode1=0x9 & d1 & d2 { addflags(d1, d2); d2 = d1 + d2; resultflags(d2); }
:ADD d1w,a2w is opcode2=0xF2 & opcode2x=0x0 & d1w & a2w { addflags(d1w, a2w); a2w = d1w + a2w; resultflags(a2w); }
:ADD a1w,d2w is opcode2=0xF2 & opcode2x=0xC & a1w & d2w { addflags(a1w, d2w); d2w = a1w + d2w; resultflags(d2w); }
:ADD a1w,a2w is opcode2=0xF2 & opcode2x=0x4 & a1w & a2w { addflags(a1w, a2w); a2w = a1w + a2w; resultflags(a2w); }
# It seems like addflags doesn't work with immediate
:ADD Imm8,d2 is opcode1=0xD & e1 = 1 & d2; Imm8 { # D4-D7
    #addflags(sext(Imm8), d2);
    d2 = sext(Imm8) + d2; resultflags(d2);
}
:ADD Imm16,d2w is opcode2=0xF7 & opcode2x=0x1 & e1w = 2 & d2w; Imm16 {
    #addflags(sext(Imm16), d2w);
    d2w = sext(Imm16) + d2w; resultflags(d2w);
}
:ADD Imm24,d2w is opcode2=0xF4 & opcode2x=0x6 & e1w = 0 & d2w; Imm24 { addflags(Imm24, d2w); d2w = sext(Imm24) + d2w; resultflags(d2w); }
:ADD Imm8,a2 is opcode1=0xD & e1=0 & a2; Imm8 { # DC-DF
    #addflags(sext(Imm8), a2);
    a2 = sext(Imm8) + a2; resultflags(a2);
}
:ADD Imm16,a2w is opcode2=0xF7 & opcode2x=0x0 & e1w = 2 & a2w; Imm16 {
    #addflags(sext(Imm16), a2w);
    a2w = sext(Imm16) + a2w; resultflags(a2w);
}
:ADD Imm24,a2w is opcode2=0xF4 & opcode2x=0x6 & e1w = 1 & a2w; Imm24 { addflags(Imm24, a2w); a2w = Imm24 + a2w; resultflags(a2w); }

:ADDC d1w,d2w is opcode2=0xF2 & opcode2x=0x8 & d1w & d2w {
    local old_cf:3 = zext($(CF));
    $(CX) = ( carry(d1w:3, d2w:3)) | ( carry(d1w:3 + d2w:3, old_cf));
    $(VX) = (scarry(d1w:3, d2w:3)) | (scarry(d1w:3 + d2w:3, old_cf));
    $(VF) = (scarry(d1w:2, d2w:2)) | (scarry(d1w:2 + d2w:2, old_cf:2));
    $(CF) = ( carry(d1w:2, d2w:2)) | ( carry(d1w:2 + d2w:2, old_cf:2));
    d2w = d1w + d2w + old_cf;
    resultflags(d2w);
}

# For stack pointer mainly - actual code uses imm8 but signed instead of delta8
:ADDNF delta8,a2w is opcode2=0xF5 & opcode2x=0x0 & e1w=3 & a2w; delta8 { a2w = a2w + delta8; }

macro subflags(op1, op2) {   # Flags set by sub instructions - not sure I got this right
    $(CX) = (op1:3 < op2:3);
    $(VX) = (sborrow(op1:3, op2:3));
    $(CF) = (op1:2 < op2:2);
    $(VF) = (sborrow(op1:2, op2:2));
}

:SUB d1,d2 is opcode1=0xA & d1 & d2 { subflags(d2, d1); d2 = d2 - d1; resultflags(d2); }
:SUB d1w,a2w is opcode2=0xF2 & opcode2x=0x1 & d1w & a2w { subflags(a2w, d1w); a2w = a2w - d1w; resultflags(a2w); }
:SUB a1w,d2w is opcode2=0xF2 & opcode2x=0xD & a1w & d2w { subflags(d2w, a1w); d2w = d2w - a1w; resultflags(d2w); }
:SUB a1w,a2w is opcode2=0xF2 & opcode2x=0x5 & a1w & a2w { subflags(a2w, a1w); a2w = a2w - a1w; resultflags(a2w); }
# Same as with add, subflags doesn't like immediate data
:SUB Imm16,d2w is opcode2=0xF7 & opcode2x=0x1 & e1w=3 & d2w; Imm16 {
    #subflags(d2w, sext(Imm16));
    d2w = d2w - sext(Imm16); resultflags(d2w);
}
:SUB Imm24,d2w is opcode2=0xF4 & opcode2x=0x6 & e1w=2 & d2w; Imm24 { subflags(d2w, Imm24); d2w = d2w - Imm24; resultflags(d2w); }
:SUB Imm16,a2w is opcode2=0xF7 & opcode2x=0x0 & e1w=3 & a2w; Imm16 {
    #subflags(a2w, sext(Imm16));
    a2w = a2w - sext(Imm16); resultflags(a2w);
}
:SUB Imm24,a2w is opcode2=0xF4 & opcode2x=0x6 & e1w=3 & a2w; Imm24 { subflags(a2w, Imm24); a2w = a2w - Imm24; resultflags(a2w); }

:SUBC d1w,d2w is opcode2=0xF2 & opcode2x=0x9 & d1w & d2w {
    local old_cf:3 = zext($(CF));
    $(CX) = (d2w:3 < d1w:3) | (d2w:3 - d1w:3 < old_cf);
    $(VX) = (sborrow(d2w:3, d1w:3)) | (sborrow(d2w:3 - d1w:3, old_cf));
    $(CX) = (d2w:2 < d1w:2) | (d2w:2 - d1w:2 < old_cf:2);
    $(VX) = (sborrow(d2w:2, d1w:2)) | (sborrow(d2w:2 - d1w:2, old_cf:2));
    d2w = d1w - d2w - old_cf;
    resultflags(d2w);
}

:MUL d1w,d2w is opcode2=0xF3 & opcode2x=0x4 & d1w & d2w {
    # VX, CX, NX, ZX, CF undefined
    local res32:4 = sext(d1w:2) * sext(d2w:2);
    d2w = res32:3;
    MDR = res32(2);
    $(VF) = 0;
    $(NF) = (res32 s< 0);
    $(ZF) = (res32 == 0);
}
:MULU d1w,d2w is opcode2=0xF3 & opcode2x=0x5 & d1w & d2w {
    # VX, CX, NX, ZX, CF undefined
    local res32:4 = zext(d1w:2) * zext(d2w:2);
    d2w = res32:3;
    MDR = res32(2);
    $(VF) = 0;
    $(NF) = (res32 s< 0);
    $(ZF) = (res32 == 0);
}
:DIVU d1w,d2w is opcode2=0xF3 & opcode2x=0x6 & d1w & d2w {
    local dividend:4 = zext(MDR) << 16 | zext(d2w:2);
    local divisor:4 = zext(d1w:2);
    local quotient:4 = dividend / divisor;
    local remainder:4 = dividend % divisor;

    d2w = zext(quotient:2);
    MDR = remainder:2; # Will always fit

    $(VF) = (divisor == 0) | (quotient >> 16 != 0);
    $(NX) = 0; # Quotient d2w can't have bit 23 set
    $(ZX) = (d2w:3 == 0);
    $(NF) = (d2w:2 s< 0);
    $(ZF) = (d2w:2 == 0);
    # VX, CX, CF undefined
    # VF 1 is overflow or div by 0, in which case the other registers are undefined
}

# These generate warnings about unused extensions/truncations
:CMP d1w,d2w is opcode2=0xF3 & opcode2x=0x9 & d1w & d2w { subflags(d2w, d1w); resultflags(d2w - d1w); }
:CMP d1w,a2w is opcode2=0xF2 & opcode2x=0x2 & d1w & a2w { subflags(a2w, d1w); resultflags(a2w - d1w); }
:CMP a1w,d2w is opcode2=0xF2 & opcode2x=0xE & a1w & d2w { subflags(d2w, a1w); resultflags(d2w - a1w); }
:CMP a1w,a2w is opcode2=0xF2 & opcode2x=0x6 & a1w & a2w { subflags(a2w, a1w); resultflags(a2w - a1w); }
# Like the issue with subtract... except this exists _only_ for the flags...
:CMP imm8,d2 is opcode1=0xD & e1=2 & d2; imm8 {
    $(CX) = (d2 < sext(imm8:1));
    $(VX) = (sborrow(d2, sext(imm8:1)));
    $(CF) = (d2:2 < sext(imm8:1));
    $(VF) = (sborrow(d2:2, sext(imm8:1)));
    $(NX) = (d2 s< sext(imm8:1));
    $(ZX) = (d2 == sext(imm8:1));
    $(NF) = (d2:2 s< sext(imm8:1));
    $(ZF) = (d2:2 == sext(imm8:1));
}
:CMP imm16,d2w is opcode2=0xF7 & opcode2x=0x4 & e1w=2 & d2w; imm16 {
    $(CX) = (d2w < sext(imm16:2));
    $(VX) = (sborrow(d2w, sext(imm16:2)));
    $(CF) = (d2w:2 < imm16);
    $(VF) = (sborrow(d2w:2, imm16));
    $(NX) = (d2w s< sext(imm16:2));
    $(ZX) = (d2w == sext(imm16:2));
    $(NF) = (d2w:2 s< imm16);
    $(ZF) = (d2w:2 == imm16);
}
:CMP Imm24,d2w is opcode2=0xF4 & opcode2x=0x7 & e1w=2 & d2w; Imm24 { subflags(d2w, Imm24); resultflags(d2w - Imm24); }
:CMP imm16,a2 is opcode1=0xE & e1=3 & a2; imm16 {
    $(CX) = (a2 < sext(imm16:2));
    $(VX) = (sborrow(a2, sext(imm16:2)));
    $(CF) = (a2 < imm16);
    $(VF) = (sborrow(a2, imm16));
    $(NX) = (a2 s< sext(imm16:2));
    $(ZX) = (a2 == sext(imm16:2));
    $(NF) = (a2:2 s< imm16);
    $(ZF) = (a2:2 == imm16);
}
:CMP Imm24,a2w is opcode2=0xF4 & opcode2x=0x7 & e1w=3 & a2w; Imm24 { subflags(a2w, Imm24); resultflags(a2w - Imm24); }

macro bitwise16resultflags(op) {
    $(VF) = 0;
    $(CF) = 0;
    $(NF) = (op:2 s< 0);
    $(ZF) = (op:2 == 0);
}

:AND d1w,d2w is opcode2=0xF3 & opcode2x=0x0 & d1w & d2w { d2w = d2w & (d1w | 0xFF0000); bitwise16resultflags(d2w); }
:AND imm8,d2w is opcode2=0xF5 & opcode2x=0x0 & e1w=0 & d2w; imm8 { d2w = (d2w & imm8) | (d2w & 0xFF0000); bitwise16resultflags(d2w); }
#:AND imm8,d2w is opcode2=0xF5 & opcode2x=0x0 & e1w=0 & d2w; imm8 { d2w = d2w & (imm8 | 0xFF0000); bitwise16resultflags(d2w); } # equivalent to above, but cleaner if it worked
:AND imm16,d2w is opcode2=0xF7 & opcode2x=0x0 & e1w=0 & d2w; imm16 { d2w = (d2w & imm16) | (d2w & 0xFF0000); bitwise16resultflags(d2w); }
#:AND imm16,d2w is opcode2=0xF7 & opcode2x=0x0 & e1w=0 & d2w; imm16 { d2w = d2w & (imm16 | 0xFF0000); bitwise16resultflags(d2w); } # equivalent to above, but cleaner if it worked
:AND imm16,"PSW" is opcode2=0xF7 & opcode2x=0x1 & e1w=0 & e2w=0; imm16 { PSW = PSW & imm16; }

:OR d1w,d2w is opcode2=0xF3 & opcode2x=0x1 & d1w & d2w { d2w = d2w | (d1w & 0x00FFFF); bitwise16resultflags(d2w); }
:OR imm8,d2w is opcode2=0xF5 & opcode2x=0x0 & e1w=2 & d2w; imm8 { d2w = d2w | imm8; bitwise16resultflags(d2w); } # only compiles without zext, but not needed here fortunately
:OR imm16,d2w is opcode2=0xF7 & opcode2x=0x4 & e1w=0 & d2w; imm16 { d2w = d2w | imm16; bitwise16resultflags(d2w); } # Ditto
:OR imm16,"PSW" is opcode2=0xF7 & opcode2x=0x1 & e1w=1 & e2w=0; imm16 { PSW = PSW | imm16; }

:XOR d1w,d2w is opcode2=0xF3 & opcode2x=0x2 & d1w & d2w { d2w = d2w ^ (d1w & 0x00FFFF); bitwise16resultflags(d2w); }
:XOR imm16,d2w is opcode2=0xF7 & opcode2x=0x4 & e1w=3 & d2w; imm16 { d2w = d2w ^ imm16; } # also won't work with zext

:NOT d2w is opcode2=0xF3 & opcode2x=0xE & e1w=1 & d2w { d2w = d2w ^ 0xFFFF; bitwise16resultflags(d2w); }

:ASR d2w is opcode2=0xF3 & opcode2x=0x3 & e1w=2 & d2w {
    $(VF) = 0;
    $(CF) = (d2w & 1) != 0;
    # SLEIGH's >> is arithmetic shift left, but we need to truncate so we have to handle it manually.
    # Fortunately it's easy to mix in with the handling of the top 8 bits.
    d2w = ((d2w & 0xFFFF) >> 1) | (d2w & 0xFF8000);
    $(NF) = (d2w:2 s< 0);
    $(ZF) = (d2w:2 == 0);
}
:LSR d2w is opcode2=0xF3 & opcode2x=0x3 & e1w=3 & d2w {
    $(VF) = 0;
    $(CF) = (d2w & 1) != 0;
    # We need to zero bit 15 here.  I think this needs to be done manually, but I'm not sure.
    d2w = (((d2w & 0x00FFFF) >> 1) | (d2w & 0xFF0000)) & 0xFF7FFF;
    $(NF) = (d2w:2 s< 0);
    $(ZF) = (d2w:2 == 0);
}
# Left shift is done by adding to itself

:ROR d2w is opcode2=0xF3 & opcode2x=0x3 & e1w=1 & d2w {
    $(VF) = 0;
    local old_cf:3 = zext($(CF));
    $(CF) = (d2w & 1) != 0;
    # We need to zero bit 15 here.  I think this needs to be done manually, but I'm not sure.
    d2w = ((((d2w & 0x00FFFF) >> 1) | (d2w & 0xFF0000)) & 0xFF7FFF) | (old_cf << 15);
    $(NF) = (d2w:2 s< 0);
    $(ZF) = (d2w:2 == 0);
}
:ROL d2w is opcode2=0xF3 & opcode2x=0x3 & e1w=0 & d2w {
    $(VF) = 0;
    local old_cf:3 = zext($(CF));
    $(CF) = (d2w & 0x8000) != 0;
    d2w = ((d2w << 1) & 0x00FFFE) | (d2w & 0xFF0000) | old_cf;
    $(NF) = (d2w:2 s< 0);
    $(ZF) = (d2w:2 == 0);
}

:BTST imm8,d2w is opcode2=0xF5 & opcode2x=0x0 & e1w=1 & d2w; imm8 { bitwise16resultflags(d2w & imm8); } # zext(imm8) causes errors
:BTST imm16,d2w is opcode2=0xF7 & opcode2x=0x0 & e1w=1 & d2w; imm16 { bitwise16resultflags(d2w & imm16); } # zext(imm16) causes errors

# There is apparently an unneeded truncation in here
:BSET d2w,(a1w) is opcode2=0xF0 & opcode2x=0x2 & a1w & d2w {
    local mem_value:1 = zext(*:1 a1w);
    bitwise16resultflags(zext(mem_value) & d2w); # Yes, bitwise and here for the flags
    *:1 a1w = (mem_value | d2w:1);
}
:BCLR d2w,(a1w) is opcode2=0xF0 & opcode2x=0x3 & a1w & d2w {
    local mem_value:1 = zext(*:1 a1w);
    bitwise16resultflags(zext(mem_value) & d2w); # Yes, bitwise and here for the flags
    *:1 a1w = (mem_value & ~d2w:1);
}

dest: rel is delta8 [ rel = inst_next + delta8; ] {
    export *[ram]:3 rel; # Does this make sense for here?
}
label16: rel is delta16 [ rel = inst_next + delta16; ] {
    export *[ram]:3 rel; # Does this make sense for here?
}
label24: rel is delta24 [ rel = inst_next + delta24; ] {
    export *[ram]:3 rel; # Does this make sense for here?
}

:BEQ dest is fullopcode1=0xE8; dest { if ($(ZF) == 1) goto dest; }
:BNE dest is fullopcode1=0xE9; dest { if ($(ZF) == 0) goto dest; }
:BLT dest is fullopcode1=0xE0; dest { if (($(VF) ^ $(NF)) == 1) goto dest; }
:BLE dest is fullopcode1=0xE3; dest { if ((($(VF) ^ $(NF)) | $(ZF)) == 1) goto dest; }
:BGE dest is fullopcode1=0xE2; dest { if (($(VF) ^ $(NF)) == 0) goto dest; }
:BGT dest is fullopcode1=0xE1; dest { if ((($(VF) ^ $(NF)) | $(ZF)) == 0) goto dest; }
:BCS dest is fullopcode1=0xE4; dest { if ($(CF) == 1) goto dest; }
:BLS dest is fullopcode1=0xE7; dest { if (($(CF) | $(ZF)) == 1) goto dest; }
:BCC dest is fullopcode1=0xE6; dest { if ($(CF) == 0) goto dest; }
:BHI dest is fullopcode1=0xE5; dest { if (($(CF) | $(ZF)) == 0) goto dest; }
:BVC dest is opcode2=0xF5 & opcode2f=0xFC; dest { if ($(VF) == 0) goto dest; }
:BVS dest is opcode2=0xF5 & opcode2f=0xFD; dest { if ($(VF) == 1) goto dest; }
:BNC dest is opcode2=0xF5 & opcode2f=0xFE; dest { if ($(NF) == 0) goto dest; }
:BNS dest is opcode2=0xF5 & opcode2f=0xFF; dest { if ($(NF) == 1) goto dest; }
:BRA dest is fullopcode1=0xEA; dest { goto dest; }

# Same opcodes as the previous ones, with a prefix of 0xF5.  Convenient!
:BEQX dest is opcode2=0xF5 & opcode2f=0xE8; dest { if ($(ZX) == 1) goto dest; }
:BNEX dest is opcode2=0xF5 & opcode2f=0xE9; dest { if ($(ZX) == 0) goto dest; }
:BLTX dest is opcode2=0xF5 & opcode2f=0xE0; dest { if (($(VX) ^ $(NX)) == 1) goto dest; }
:BLEX dest is opcode2=0xF5 & opcode2f=0xE3; dest { if ((($(VX) ^ $(NX)) | $(ZX)) == 1) goto dest; }
:BGEX dest is opcode2=0xF5 & opcode2f=0xE2; dest { if (($(VX) ^ $(NX)) == 0) goto dest; }
:BGTX dest is opcode2=0xF5 & opcode2f=0xE1; dest { if ((($(VX) ^ $(NX)) | $(ZX)) == 0) goto dest; }
:BCSX dest is opcode2=0xF5 & opcode2f=0xE4; dest { if ($(CX) == 1) goto dest; }
:BLSX dest is opcode2=0xF5 & opcode2f=0xE7; dest { if (($(CX) | $(ZX)) == 1) goto dest; }
:BCCX dest is opcode2=0xF5 & opcode2f=0xE6; dest { if ($(CX) == 0) goto dest; }
:BHIX dest is opcode2=0xF5 & opcode2f=0xE5; dest { if (($(CX) | $(ZX)) == 0) goto dest; }
# Now same, but with EC instead of FC
:BVCX dest is opcode2=0xF5 & opcode2f=0xEC; dest { if ($(VX) == 0) goto dest; }
:BVSX dest is opcode2=0xF5 & opcode2f=0xED; dest { if ($(VX) == 1) goto dest; }
:BNCX dest is opcode2=0xF5 & opcode2f=0xEE; dest { if ($(NX) == 0) goto dest; }
:BNSX dest is opcode2=0xF5 & opcode2f=0xEF; dest { if ($(NX) == 1) goto dest; }

:JMP label16 is fullopcode1=0xFC; label16 { goto label16; }
:JMP label24 is opcode2=0xF4 & opcode2f=0xE0; label24 { goto label24; }
:JMP (a1w) is opcode2=0xF0 & opcode2x=0x0 & a1w & e2w=0 { goto [a1w]; }

:JSR label16 is fullopcode1=0xFD; label16 {
    #*:3 A3 = inst_next;
    #A3 = A3 - 4;
    call label16;
}
:JSR label24 is opcode2=0xF4 & opcode2f=0xE1; label24 {
    #*:3 A3 = inst_next;
    #A3 = A3 - 4;
    call label24;
}
:JSR (a1w) is opcode2=0xF0 & opcode2x=0x0 & a1w & e2w=1 {
    #*:3 A3 = inst_next;
    #A3 = A3 - 4;
    call [a1w];
}

:NOP is fullopcode1=0xF6 {}

:RTS is fullopcode1=0xFE {
    #local addr = *:3 A3;
    #A3 = A3 + 4;
    # I'm not sure the brackets here (and in JMP/JSR (A1)) are correct
    return [PC];
}

:RTI is fullopcode1=0xEB {
    PSW = *:2 A3;
    local addr = *:3 (A3 + 2);
    A3 = A3 + 6;
    return [addr];
}

# Unknown instructions, based on the number of bytes that each prefix implies according to the manual
#:UNK_F0 imm8 is fullopcode1=0xF0; imm8 unimpl # 2 bytes
#:UNK_F1 imm8 is fullopcode1=0xF1; imm8 unimpl # 2 bytes
#:UNK_F2 imm8 is fullopcode1=0xF2; imm8 unimpl # 2 bytes
#:UNK_F3 imm8 is fullopcode1=0xF3; imm8 unimpl # 2 bytes
#:UNK_F4 imm8 imm24 is fullopcode1=0xF4; imm8; imm24 unimpl # 5 bytes
#:UNK_F5 imm8 delta8 is fullopcode1=0xF5; imm8; delta8 unimpl # 3 bytes
#:UNK_F7 imm8 imm16 is fullopcode1=0xF7; imm8; imm16 unimpl # 4 bytes

:BREAK is fullopcode1=0xFF unimpl # GDB extension

@if defined(H_VARIANT)
# MN102L (Pub.No.12250-030E) vs MN102H (Pub.No.22360-013E):
# Simple instructions all match
# F0, F1, F2 instructions match
# Additional F3 instructions: F3 FC is PXST, F3 FE is extended code H, F3 FF is extended code I, also a new warning about moving to PSW (but the document doesn't have much details on instructions, so it might not actually be new)
# Additional F4 instructions, BTST and BSET variants
# Massive pile of F5 instructions
# Nothing new with F7

:PXST is opcode2=0xF3 & opcode2f=0xFC unimpl
# Test bits out of memory, 1<<bit, and branches if 0/nonzero
:TBZ (Addr24_1)bit,delta8 is opcode3=0xF3 & opcode32=0xFE & opcode33=0xC & bitmode=0 & bit; Addr24_1; delta8 unimpl
:TBNZ (Addr24_1)bit,delta8 is opcode3=0xF3 & opcode32=0xFE & opcode33=0xC & bitmode=1 & bit; Addr24_1; delta8 unimpl

:BSET (Addr24_1)bit is opcode3=0xF3 & opcode32=0xFE & opcode33=0xD & bitmode=0 & bit; Addr24_1 unimpl
:BLCR (Addr24_1)bit is opcode3=0xF3 & opcode32=0xFE & opcode33=0xD & bitmode=1 & bit; Addr24_1 unimpl

# OH.  These should also use delta8 twice (different deltas)..., and also the register is jank...
:TBZ (imm8,"A2")bit,delta8 is opcode3=0xF3 & opcode32=0xFF & opcode33=0x8 & bitmode=0 & bit; imm8; delta8 unimpl
:TBZ (imm8,"A3")bit,delta8 is opcode3=0xF3 & opcode32=0xFF & opcode33=0x8 & bitmode=1 & bit; imm8; delta8 unimpl
:BSET (delta8,"A2")bit is opcode3=0xF3 & opcode32=0xFF & opcode33=0x9 & bitmode=0 & bit; delta8 unimpl
:BSET (delta8,"A3")bit is opcode3=0xF3 & opcode32=0xFF & opcode33=0x9 & bitmode=1 & bit; delta8 unimpl
:TBNZ (imm8,"A2")bit,delta8 is opcode3=0xF3 & opcode32=0xFF & opcode33=0xA & bitmode=0 & bit; imm8; delta8 unimpl
:TBNZ (imm8,"A3")bit,delta8 is opcode3=0xF3 & opcode32=0xFF & opcode33=0xA & bitmode=1 & bit; imm8; delta8 unimpl
:BCLR (delta8,"A2")bit is opcode3=0xF3 & opcode32=0xFF & opcode33=0xB & bitmode=0 & bit; delta8 unimpl
:BCLR (delta8,"A3")bit is opcode3=0xF3 & opcode32=0xFF & opcode33=0xB & bitmode=1 & bit; delta8 unimpl

# Direct F5 instructions
:TBZ (imm8,"A0")bit2,delta8 is opcode2=0xF5 & opcode2x=0x8 & bitmode2=0 & bit2; imm8; delta8 unimpl
:TBZ (imm8,"A1")bit2,delta8 is opcode2=0xF5 & opcode2x=0x8 & bitmode2=1 & bit2; imm8; delta8 unimpl
:BSET (delta8,"A0")bit2 is opcode2=0xF5 & opcode2x=0x9 & bitmode2=0 & bit2; delta8 unimpl
:BSET (delta8,"A1")bit2 is opcode2=0xF5 & opcode2x=0x9 & bitmode2=1 & bit2; delta8 unimpl
:TBNZ (imm8,"A0")bit2,delta8 is opcode2=0xF5 & opcode2x=0xA & bitmode2=0 & bit2; imm8; delta8 unimpl
:TBNZ (imm8,"A1")bit2,delta8 is opcode2=0xF5 & opcode2x=0xA & bitmode2=1 & bit2; imm8; delta8 unimpl
:BCLR (delta8,"A0")bit2 is opcode2=0xF5 & opcode2x=0xB & bitmode2=0 & bit2; delta8 unimpl
:BCLR (delta8,"A1")bit2 is opcode2=0xF5 & opcode2x=0xB & bitmode2=1 & bit2; delta8 unimpl
:TBZ (Addr16_1)bit2,delta8 is opcode2=0xF5 & opcode2x=0xC & bitmode2=0 & bit2; Addr16_1; delta8 unimpl
:TBNZ (Addr16_1)bit2,delta8 is opcode2=0xF5 & opcode2x=0xC & bitmode2=1 & bit2; Addr16_1; delta8 unimpl
:BSET (Addr16_1)bit2 is opcode2=0xF5 & opcode2x=0xD & bitmode2=0 & bit2; Addr16_1 unimpl
:BCLR (Addr16_1)bit2 is opcode2=0xF5 & opcode2x=0xD & bitmode2=1 & bit2; Addr16_1 unimpl

# F5 4n instructions (extended code J)... this is a bit jank
:MULQL d1w,d2w is opcode2=0xF5 & opcode2x=0x4 & d1w & d2w; imm8=0 unimpl
:MULQH d1w,d2w is opcode2=0xF5 & opcode2x=0x4 & d1w & d2w; imm8=1 unimpl
# F5 6n instructions (extended code K)
:MULQ d1w,d2w is opcode2=0xF5 & opcode2x=0x6 & d1w & d2w; imm8=0x10 unimpl
# F5 Fn instructions, n between 0 and 7 (extended code L)
:MULQL imm8,d2w is opcode2=0xF5 & opcode2x=0xF & e1w=0 & d2w; delta8=0x04; imm8 unimpl
:MULQH imm8,d2w is opcode2=0xF5 & opcode2x=0xF & e1w=0 & d2w; delta8=0x05; imm8 unimpl
:MULQL imm16,d2w is opcode2=0xF5 & opcode2x=0xF & e1w=1 & d2w; delta8=0x08; imm16 unimpl
:MULQH imm16,d2w is opcode2=0xF5 & opcode2x=0xF & e1w=1 & d2w; delta8=0x09; imm16 unimpl
@endif